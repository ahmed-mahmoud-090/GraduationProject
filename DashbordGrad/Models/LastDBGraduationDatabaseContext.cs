// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DashbordGrad.Models;

public partial class LastDBGraduationDatabaseContext : DbContext
{
    public LastDBGraduationDatabaseContext(DbContextOptions<LastDBGraduationDatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Bank> Banks { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Embass> Embasses { get; set; }

    public virtual DbSet<EntertainmentPlace> EntertainmentPlaces { get; set; }

    public virtual DbSet<Hotel> Hotels { get; set; }

    public virtual DbSet<Restaurant> Restaurants { get; set; }

    public virtual DbSet<TourismtPlace> TourismtPlaces { get; set; }

    public virtual DbSet<TransportProvider> TransportProviders { get; set; }

    public virtual DbSet<Type> Types { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Bank>(entity =>
        {
            entity.HasIndex(e => e.CityId, "IX_Banks_CityId");

            entity.Property(e => e.Name).IsRequired();

            entity.HasOne(d => d.City).WithMany(p => p.Banks).HasForeignKey(d => d.CityId);
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasIndex(e => e.Name, "IX_Cities_Name").IsUnique();

            entity.Property(e => e.Name).IsRequired();
        });

        modelBuilder.Entity<Embass>(entity =>
        {
            entity.HasIndex(e => e.CityId, "IX_Embasses_CityId");

            entity.Property(e => e.Country).IsRequired();
            entity.Property(e => e.Name).IsRequired();

            entity.HasOne(d => d.City).WithMany(p => p.Embasses).HasForeignKey(d => d.CityId);
        });

        modelBuilder.Entity<EntertainmentPlace>(entity =>
        {
            entity.HasIndex(e => e.CityId, "IX_EntertainmentPlaces_CityId");

            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.PlaceType).IsRequired();

            entity.HasOne(d => d.City).WithMany(p => p.EntertainmentPlaces).HasForeignKey(d => d.CityId);
        });

        modelBuilder.Entity<Hotel>(entity =>
        {
            entity.HasIndex(e => e.CityId, "IX_Hotels_CityId");

            entity.Property(e => e.Name).IsRequired();

            entity.HasOne(d => d.City).WithMany(p => p.Hotels).HasForeignKey(d => d.CityId);
        });

        modelBuilder.Entity<Restaurant>(entity =>
        {
            entity.HasIndex(e => e.CityId, "IX_Restaurants_CityId");

            entity.Property(e => e.Name).IsRequired();

            entity.HasOne(d => d.City).WithMany(p => p.Restaurants).HasForeignKey(d => d.CityId);
        });

        modelBuilder.Entity<TourismtPlace>(entity =>
        {
            entity.ToTable("Tourismt_Places");

            entity.HasIndex(e => e.CityId, "IX_Tourismt_Places_CityId");

            entity.HasIndex(e => e.Typeofplaceid, "IX_Tourismt_Places_Typeofplaceid");

            entity.Property(e => e.Discription).IsRequired();
            entity.Property(e => e.Name).IsRequired();

            entity.HasOne(d => d.City).WithMany(p => p.TourismtPlaces).HasForeignKey(d => d.CityId);

            entity.HasOne(d => d.Typeofplace).WithMany(p => p.TourismtPlaces).HasForeignKey(d => d.Typeofplaceid);
        });

        modelBuilder.Entity<TransportProvider>(entity =>
        {
            entity.ToTable("transportProviders");

            entity.HasIndex(e => e.CityId, "IX_transportProviders_CityId");

            entity.HasIndex(e => e.TypePlaceId, "IX_transportProviders_TypePlaceID");

            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.ProviderType).IsRequired();
            entity.Property(e => e.TypePlaceId).HasColumnName("TypePlaceID");

            entity.HasOne(d => d.City).WithMany(p => p.TransportProviders).HasForeignKey(d => d.CityId);

            entity.HasOne(d => d.TypePlace).WithMany(p => p.TransportProviders).HasForeignKey(d => d.TypePlaceId);
        });

        modelBuilder.Entity<Type>(entity =>
        {
            entity.ToTable("types");

            entity.HasIndex(e => e.Name, "IX_types_Name").IsUnique();

            entity.Property(e => e.Name).IsRequired();
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasIndex(e => e.Email, "IX_Users_Email").IsUnique();

            entity.Property(e => e.Bdate)
                .HasColumnType("date")
                .HasColumnName("BDate");
            entity.Property(e => e.Email).IsRequired();
            entity.Property(e => e.FirstName).IsRequired();
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.SacondName).IsRequired();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}